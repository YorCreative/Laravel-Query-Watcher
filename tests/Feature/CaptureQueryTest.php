<?php

namespace YorCreative\QueryWatcher\Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Http;
use YorCreative\QueryWatcher\Events\QueryEvent;
use YorCreative\QueryWatcher\Listeners\QueryListener;
use YorCreative\QueryWatcher\Tests\TestCase;
use YorCreative\QueryWatcher\Tests\Utility\Models\DemoOwner;
use YorCreative\QueryWatcher\Tests\Utility\Models\Test;

class CaptureQueryTest extends TestCase
{
    use DatabaseTransactions;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::trackQueries();
    }

    /**
     * @test
     * @group Feature
     */
    public function it_can_ignore_a_query_by_ignorable_table_scope()
    {
        Event::fake();

        Config::set('querywatcher.scope.ignorable_tables', [
            'tests'
        ]);

        (new Test())
            ->newQuery()
            ->create([
                'field' => 'testing'
            ]);

        (new Test())
            ->newQuery()
            ->get();

        (new Test())
            ->newQuery()
            ->where('field', 'testing')
            ->update([
                'field' => 'okay'
            ]);


        Event::assertNotDispatched(QueryEvent::class);

        $this->assertQueryCountMatches(3);
    }

    /**
     * @test
     * @group Feature
     */
    public function it_can_ignore_a_query_by_ignorable_statement_scope()
    {
        HTTP::fake();

        Config::set('querywatcher.scope.ignorable_statements', [
            'delete'
        ]);

        (new Test())
            ->newQuery()
            ->create([
                'field' => 'testing'
            ]);

        $tests = (new Test())
            ->newQuery()
            ->get();

        $tests->first()->delete();

        $this->assertEventBroadcasted(
            'query.event',
            null,
            2
        );

        $this->assertQueryCountMatches(3);
    }


    /**
     * @test
     * @group Feature
     */
    public function it_can_capture_a_query_without_auth_user()
    {
        HTTP::fake();

        (new Test())
            ->newQuery()
            ->get();

        $this->assertEventBroadcasted(
            'query.event'
        );

        $this->assertQueryCountMatches(1);
    }

    /**
     * @test
     * @group Feature
     */
    public function it_can_capture_a_query_with_auth_user()
    {
        HTTP::fake();

        $user = DemoOwner::factory()->create();

        Auth::login($user);

        (new Test())
            ->newQuery()
            ->get();

        $this->assertEventBroadcasted(
            'query.event'
        );

        $this->assertQueryCountMatches(2);
    }

    /**
     * @test
     * @group Feature
     */
    public function it_is_listening_for_query_event()
    {
        Event::fake();

        Event::assertListening(QueryEvent::class, QueryListener::class);
    }
}
